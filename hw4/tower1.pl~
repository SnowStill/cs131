%tower 

%transpose, from https://stackoverflow.com/questions/4280986/how-to-transpose-a-matrix-in-prolog
transpose([], []).
transpose([F|Fs], Ts) :-
    transpose(F, [F|Fs], Ts).

transpose([], _, []).
transpose([_|Rs], Ms, [Ts|Tss]) :-
        lists_firsts_rests(Ms, Ts, Ms1),
        transpose(Rs, Ms1, Tss).

lists_firsts_rests([], [], []).
lists_firsts_rests([[F|Os]|Rest], [F|Fs], [Os|Oss]) :-
        lists_firsts_rests(Rest, Fs, Oss).

unique_list(_, []).
unique_list(N, [H|T]) :-
    length(H, N),
    fd_domain(H, 1, N),%Define all values in List to be between 1 and N
    fd_all_different(H),%Define all values in List to be different
    unique_list(N, T).

count_towers([], [], _).
count_towers([H | T], [H | Towers], PrvTower) :-
    H #> PrvTower,%if it is greater than the height of prevtower, append to the result and move to the next tower.
    count_towers(T, Towers, H).
count_towers([H | T], Towers, PrvTower) :-
    H #< PrvTower,%or if it is lower, do nothing with the result and continue.
    count_towers(T, Towers, PrvTower).

check_row(Row, Counth) :-
    count_towers(Row, ViewedTowers, 0),
    length(ViewedTowers, Num),
    Num #= Counth.

check_count([], []).
check_count([TH|TT], [CountH|CountT]) :-
    check_row(TH, CountH),
    check_count(TT, CountT).

tower(N, T, C) :-
    N >= 0,
    C = counts(Top, Bottom, Left, Right),
    length(T,N),
    length(Top, N),
    length(Bottom, N),
    length(Left, N),
    length(Right, N),
    unique_list(N,T),
    transpose(T, Ttrans),
    unique_list(N, Ttrans),
    maplist(fd_labeling, T),
    maplist(reverse, T, Trev),
    maplist(reverse, Ttrans, Ttransrev),
    check_count(Ttrans, Top),
    check_count(Ttransrev, Bottom),
    check_count(T, Left),
    check_count(Trev, Right).

%plain_tower

check_count2([],_,0).

check_count2([H|T],Prvtower,Towernum) :-
    H > Prvtower,
    Newtowernum is Towernum - 1,
    check_count2(T,H,Newtowernum).

check_count2([H|T],Prvtower,Towernum) :-
    H < Prvtower,
    check_count2(T,Prvtower,Towernum).


make_per_row(0, []).
make_per_row(N, [H|T]) :-
    NewH is N - 1,
    H is N,
    make_per_row(NewH, T).

unique_list2(Lper, N, List, Count) :-
    length(List, N),
    permutation(Lper, List),
    between(1,N, Count),
    check_count2(List, 0, Count).

plain_tower(N, T, C) :-

    make_per_row(N, Perlist),
    C = counts(Top, Bottom, Left, Right),
    length(T, N),
    length(Top, N),
    length(Bottom, N),
    length(Left, N),
    length(Right, N),
    
    unique_list2(Perlist, N, T, Left),

    transpose(T, Ttrans),
    unique_list2(Perlist, N, Ttrans, Top),

    maplist(reverse, T, Trev),
    unique_list2(Perlist, N, Trev, Right),

    maplist(reverse, Ttrans, Ttransrev),
    unique_list2(Perlist, N, Ttransrev, Bottom).

%speedup

tower_time(Ttime) :-
    statistics(cpu_time,[Start|_]),
    tower(5,_T,counts([2,3,2,1,4],[3,1,3,3,2],[4,1,2,5,2],[2,4,2,1,2])),
    statistics(cpu_time,[End|_]),
    Ttime is End - Start.

plain_tower_time(Ptime) :-
    statistics(cpu_time,[Start|_]),
    plain_tower(5,_T,counts([2,3,2,1,4],[3,1,3,3,2],[4,1,2,5,2],[2,4,2,1,2])),
    statistics(cpu_time,[End|_]),
    Ptime is End - Start.

speedup(Ratio) :-
    tower_time(Ttime),
    plain_tower_time(Ptime),
    Ratio is Ptime / Ttime.

%ambiguous
ambiguous(N, C, T1, T2) :-
    tower(N, T1, C),
    tower(N, T2, C),
    T1 \= T2.

test1(N,C,T1) :-
    plain_tower(N, T1, C).
test2(N,C,T2) :-
    tower(N, T2, C).
